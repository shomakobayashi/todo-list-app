name: Terraform

on:
  push:
    branches:
      - main
      - 'feature-*'
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - 'feature-*'
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      project_id:
        description: "Project Identifier"
        required: true
        type: string
      plan_apply_id:
        description: "Choose action"
        required: true
        type: choice
        options:
          - plan
          - apply
      tl_approved_id:
        description: "TL Approved"
        required: true
        type: boolean
      tfstate_unlock_id:
        description: "Unlock tfstate"
        required: true
        type: boolean

permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  get-information:
    name: 'Get Information'
    runs-on: ubuntu-latest

    env:
      ENV: "prd"
      SEPARATOR1: "[["
      SEPARATOR2: "]]"
      PROJECTS: "./infra/projects"

    outputs:
      work_dir: ${{ steps.check_project.outputs.work_dir }}
      plan_apply: ${{ steps.check_project.outputs.plan_apply }}
      unlock: ${{ steps.check_project.outputs.unlock }}
      project: ${{ steps.check_project.outputs.project }}
      tl_approved: ${{ steps.check_project.outputs.tl_approved }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Project Identifier
        id: check_project
        run: |
          # メッセージからプロジェクトIDを抽出（コミットメッセージの形式に依存）
          mes=$(echo "${{ github.event.head_commit.message }}" | awk '{ gsub("","", $0); print }')
          sep1="${{ env.SEPARATOR1 }}"
          sep2="${{ env.SEPARATOR2 }}"
          github_event_name="${{ github.event_name }}"
          input_project_id="${{ github.event.inputs.project_id }}"
          input_plan_apply="${{ github.event.inputs.plan_apply_id }}"
          input_unlock="${{ github.event.inputs.tfstate_unlock_id }}"
          input_tl_approved="${{ github.event.inputs.tl_approved_id }}"

          if [[ -n "$input_project_id" ]] && [[ "$github_event_name" == "workflow_dispatch" ]]; then
            project_id="$input_project_id"
            plan_apply="$input_plan_apply"
          elif [[ -z "$input_project_id" ]] && [[ "$github_event_name" == "push" ]]; then
            project_id=$(echo "$mes" | awk -v sep1="$sep1" -v sep2="$sep2" '{ match($0, sep1 "([^]]+)" sep2, arr); print arr[1] }')
            plan_apply="plan"
          else
            project_id=""
          fi

          if [[ -z "$project_id" ]]; then
            echo "プロジェクト識別子未設定なので終了します"
            echo "work_dir=__not_defined" >> $GITHUB_OUTPUT
            echo "plan_apply=__not_defined" >> $GITHUB_OUTPUT
          else
            echo "work_dir=${{ env.PROJECTS }}/${project_id}/${{ env.ENV }}/" >> $GITHUB_OUTPUT
            echo "plan_apply=${plan_apply}" >> $GITHUB_OUTPUT
            echo "unlock=${input_unlock}" >> $GITHUB_OUTPUT
            echo "project=${project_id}" >> $GITHUB_OUTPUT
            echo "tl_approved=${input_tl_approved}" >> $GITHUB_OUTPUT
          fi

  A_terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: get-information
    if: ${{ needs.get-information.outputs.work_dir != '__not_defined' && needs.get-information.outputs.unlock != 'true' }}
    environment: prd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform plan -no-color

  B_terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [get-information, A_terraform_plan]
    if: ${{ needs.get-information.outputs.plan_apply == 'apply' && needs.get-information.outputs.work_dir != '__not_defined' && needs.get-information.outputs.unlock != 'true' && needs.get-information.outputs.tl_approved == 'true' }}
    environment: prd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform validate -no-color

      - name: Terraform Apply
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform apply -no-color -auto-approve

  C_tfstate_unlock:
    name: 'TFState Unlock'
    runs-on: ubuntu-latest
    needs: get-information
    if: ${{ needs.get-information.outputs.unlock == 'true' }}
    environment: prd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: AWS CLI Configure
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: TFState Unlock
        run: |
          aws dynamodb describe-table --table-name "aws-and-infra-${{ env.ENV }}-dynamodb-terraform-locks"
          aws dynamodb scan --table-name "aws-and-infra-${{ env.ENV }}-dynamodb-terraform-locks"
          aws dynamodb delete-item --table-name "aws-and-infra-${{ env.ENV }}-dynamodb-terraform-locks" --key '{"LockID": { "S": "aws-and-infra-${{ env.ENV }}-s3-terraform-state/${{ needs.get-information.outputs.project }}/terraform.tfstate"}}'
