name: Terraform

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: "Project Identifier"
        required: true
        type: string
      plan_apply_id:
        description: "Choose action (plan/apply)"
        required: true
        type: choice
        options:
          - plan
          - apply
      tl_approved_id:
        description: "TL Approved (only for apply)"
        required: false
        type: boolean
        default: false
      tfstate_unlock_id:
        description: "Unlock tfstate"
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  get-information:
    name: 'Get Information'
    runs-on: ubuntu-latest

    outputs:
      work_dir: ${{ steps.set_outputs.outputs.work_dir }}
      plan_apply: ${{ steps.set_outputs.outputs.plan_apply }}
      unlock: ${{ steps.set_outputs.outputs.unlock }}
      project: ${{ steps.set_outputs.outputs.project }}
      tl_approved: ${{ steps.set_outputs.outputs.tl_approved }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Outputs
        id: set_outputs
        run: |
          project_id="${{ github.event.inputs.project_id }}"
          plan_apply="${{ github.event.inputs.plan_apply_id }}"
          unlock="${{ github.event.inputs.tfstate_unlock_id }}"
          tl_approved="${{ github.event.inputs.tl_approved_id }}"

          if [[ -z "$project_id" ]]; then
            echo "Project ID is required"
            exit 1
          fi

          echo "work_dir=./infra/${project_id}/" >> $GITHUB_OUTPUT
          echo "plan_apply=${plan_apply}" >> $GITHUB_OUTPUT
          echo "unlock=${unlock}" >> $GITHUB_OUTPUT
          echo "project=${project_id}" >> $GITHUB_OUTPUT
          echo "tl_approved=${tl_approved}" >> $GITHUB_OUTPUT

  A_terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: get-information
    if: ${{ needs.get-information.outputs.plan_apply == 'plan' && needs.get-information.outputs.unlock != 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform plan -no-color

  B_terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [get-information, A_terraform_plan]
    if: ${{ needs.get-information.outputs.plan_apply == 'apply' && needs.get-information.outputs.tl_approved == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform validate -no-color

      - name: Terraform Apply
        working-directory: ${{ needs.get-information.outputs.work_dir }}
        run: terraform apply -no-color -auto-approve

  C_tfstate_unlock:
    name: 'TFState Unlock'
    runs-on: ubuntu-latest
    needs: get-information
    if: ${{ needs.get-information.outputs.unlock == 'true' }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ap-northeast-1

      - name: TFState Unlock
        run: |
          aws dynamodb delete-item --table-name "terraform-lock-table" --key '{"LockID": {"S": "infra/${{ needs.get-information.outputs.project }}/prd/terraform.tfstate"}}'
